// ------------------------------
// Sass Variables
// ------------------------------
$color-prefix: --color-;
$color-gray-prefix: --color-gray-;
$color-themes: (
  primary: (
    base:
      hsl(
        var(--kssBrandColorH),
        calc(var(--kssBrandColorS) * 1%),
        calc(var(--kssBrandColorL) * 1%)
      ),
    dark:
      hsl(
        var(--kssBrandColorH),
        calc(var(--kssBrandColorS) * 1%),
        calc((var(--kssBrandColorL) - 15) * 1%)
      ),
    light:
      hsl(
        var(--kssBrandColorH),
        calc(var(--kssBrandColorS) * 1%),
        calc((var(--kssBrandColorL) + 20) * 1%)
      ),
    transparent:
      hsla(
        var(--kssBrandColorH),
        calc(var(--kssBrandColorS) * 1%),
        calc((var(--kssBrandColorL) + 20) * 1%),
        0.5
      ),
    contrast: hsl(0, 0%, 100%)
  )
);

$gray-themes: (
  0: #ffffff,
  10: #f8f9fa,
  20: #e9ecef,
  30: #dee2e6,
  40: #ced4da,
  50: #adb5bd,
  60: #6c757d,
  70: #495057,
  80: #343a40,
  90: #212529,
  100: #000000
);

// ------------------------------
// Set color function
// ------------------------------
// retrieve color from map with Sass ie. `color(primary, base)`
@function color($color-name, $color-variant: null, $true-val: false) {
  // if we enable css var
  @if $use-css-var == true {
    // we need to return the color value
    @if $true-val == true {
      // color variant is optional
      @if ($color-variant != null) {
        // map inception, need two deep
        @return map-get(map-get($color-themes, $color-name), $color-variant);
      } @else {
        // Default color
        @return map-get(map-get($color-themes, $color-name), base);
      } // if we're only returning the CSS4 variable
    } @else {
      // color variant is optional
      @if ($color-variant != null) {
        // map inception, need two names
        @return var(#{$color-prefix}#{$color-name}-#{$color-variant});
      } @else {
        // Default color, one name
        @return var(#{$color-prefix}#{$color-name}-base);
      }
    }
  } @else {
    // color variant is optional
    @if ($color-variant != null) {
      // map inception, need two deep
      @return map-get(map-get($color-themes, $color-name), $color-variant);
    } @else {
      // Default color
      @return map-get(map-get($color-themes, $color-name), base);
    }
  }
}
@function color-gray($gray-theme, $true-val: false) {
  @if $use-css-var == true {
    @if $true-val == true {
      @return map-get($gray-themes, $gray-theme); // True Val
    } @else {
      @return var(#{$color-gray-prefix}#{$gray-theme});
      // CSS Var
    }
  } @else {
    @return map-get($gray-themes, $gray-theme); // Disabled CSS Var
  }
}

// ------------------------------
// Set root variables
// ------------------------------
@if $use-css-var == true {
  #{$root-default} {
    @each $name, $color in $color-themes {
      @if type-of($color) == "map" {
        @each $subname, $subcolor in $color {
          #{$color-prefix}#{$name}-#{$subname}: $subcolor;
        }
      } @else if type-of($color) == "color" {
        #{$color-prefix}#{$name}: $color;
      }
    }
    @each $name, $gray-theme in $gray-themes {
      #{$color-gray-prefix}#{$name}: $gray-theme;
    }
  }
}
